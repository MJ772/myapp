\nimport \'package:flutter/material.dart\';\nimport \'package:cloud_firestore/cloud_firestore.dart\';\nimport \'package:firebase_auth/firebase_auth.dart\';\nimport \'package:myapp/models/service.dart\';\n\nclass ManageServicesScreen extends StatefulWidget {\n  const ManageServicesScreen({super.key});\n\n  @override\n  _ManageServicesScreenState createState() => _ManageServicesScreenState();\n}\n\nclass _ManageServicesScreenState extends State<ManageServicesScreen> {\n  final FirebaseFirestore _firestore = FirebaseFirestore.instance;\n  final FirebaseAuth _auth = FirebaseAuth.instance;\n\n  @override\n  Widget build(BuildContext context) {\n    final user = _auth.currentUser;\n    if (user == null) {\n      return Scaffold(body: Center(child: Text(\'Please sign in.\')));\n    }\n\n    return Scaffold(\n      appBar: AppBar(\n        title: const Text(\'Manage Services\'),\n        actions: [\n          IconButton(\n            icon: const Icon(Icons.add),\n            onPressed: () => _showAddServiceDialog(context, user.uid),\n          ),\n        ],\n      ),\n      body: StreamBuilder<QuerySnapshot>(\n        stream: _firestore\n            .collection(\'services\')\n            .where(\'garageId\', isEqualTo: user.uid)\n            .snapshots(),\n        builder: (context, snapshot) {\n          if (snapshot.connectionState == ConnectionState.waiting) {\n            return const Center(child: CircularProgressIndicator());\n          }\n          if (!snapshot.hasData || snapshot.data!.docs.isEmpty) {\n            return const Center(child: Text(\'You have not added any services yet.\'));\n          }\n\n          final services = snapshot.data!.docs\n              .map((doc) => Service.fromDocument(doc))\n              .toList();\n\n          return ListView.builder(\n            itemCount: services.length,\n            itemBuilder: (context, index) {\n              final service = services[index];\n              return ListTile(\n                title: Text(service.title),\n                subtitle: Text(\'${service.duration} - \$${service.price.toStringAsFixed(2)}\'),\n                trailing: IconButton(\n                  icon: const Icon(Icons.delete, color: Colors.redAccent),\n                  onPressed: () => _deleteService(service.id),\n                ),\n              );\n            },\n          );\n        },\n      ),\n    );\n  }\n\n  void _showAddServiceDialog(BuildContext context, String garageId) {\n    final _formKey = GlobalKey<FormState>();\n    final _titleController = TextEditingController();\n    final _priceController = TextEditingController();\n    final _durationController = TextEditingController();\n\n    showDialog(\n      context: context,\n      builder: (context) {\n        return AlertDialog(\n          title: const Text(\'Add New Service\'),\n          content: Form(\n            key: _formKey,\n            child: Column(\n              mainAxisSize: MainAxisSize.min,\n              children: [\n                TextFormField(\n                  controller: _titleController,\n                  decoration: const InputDecoration(labelText: \'Title\'),\n                  validator: (value) => value!.isEmpty ? \'Please enter a title\' : null,\n                ),\n                TextFormField(\n                  controller: _priceController,\n                  decoration: const InputDecoration(labelText: \'Price\'),\n                  keyboardType: TextInputType.number,\n                  validator: (value) => value!.isEmpty ? \'Please enter a price\' : null,\n                ),\n                TextFormField(\n                  controller: _durationController,\n                  decoration: const InputDecoration(labelText: \'Duration (e.g., 1hr, 30min)\'),\n                  validator: (value) => value!.isEmpty ? \'Please enter a duration\' : null,\n                ),\n              ],\n            ),\n          ),\n          actions: [\n            TextButton(\n              onPressed: () => Navigator.of(context).pop(),\n              child: const Text(\'Cancel\'),\n            ),\n            ElevatedButton(\n              onPressed: () {\n                if (_formKey.currentState!.validate()) {\n                  final newService = Service(\n                    id: \'\', // Firestore will generate\n                    garageId: garageId,\n                    title: _titleController.text,\n                    price: double.parse(_priceController.text),\n                    duration: _durationController.text,\n                  );\n                  _firestore.collection(\'services\').add(newService.toMap());\n                  Navigator.of(context).pop();\n                }\n              },\n              child: const Text(\'Add\'),\n            ),\n          ],\n        );\n      },\n    );\n  }\n\n  Future<void> _deleteService(String serviceId) async {\n    try {\n      await _firestore.collection(\'services\').doc(serviceId).delete();\n    } catch (e) {\n      ScaffoldMessenger.of(context).showSnackBar(\n        SnackBar(content: Text(\'Failed to delete service: $e\')),\n      );\n    }\n  }\n}\n