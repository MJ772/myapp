rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // ===== Helpers =====
    function isSignedIn() {
      return request.auth != null;
    }
    function uid() {
      return request.auth != null ? request.auth.uid : null;
    }
    function userDoc(u) {
      return get(/databases/$(database)/documents/users/$(u));
    }
    function roleOf(u) {
      return userDoc(u).data.role;
    }
    function isAdmin() {
      // Prefer custom claims (token.admin) if you set them via Admin SDK.
      return isSignedIn() && (
        request.auth.token.admin == true ||
        roleOf(uid()) == 'admin' ||
        (request.auth.token.email in [
          'emjadulhoqu3@gmail.com',
          'mandemmotorsltd@gmail.com'
        ])
      );
    }
    function isSupport() {
      return isSignedIn() && (roleOf(uid()) == 'support' || isAdmin());
    }
    function isGarage(u) {
      return roleOf(u) == 'garage';
    }
    function isChauffeur(u) {
      return roleOf(u) == 'chauffeur';
    }
    function isCourier(u) {
      return roleOf(u) == 'courier';
    }
    function vendorApproved(u) {
      return userDoc(u).data.vendorApproved == true;
    }
    function chauffeurApproved(u) {
      return userDoc(u).data.chauffeurApproved == true;
    }
    function courierApproved(u) {
      return userDoc(u).data.courierApproved == true;
    }

    // --- DEV OVERRIDE ---
    // Set this to true ONLY in your emulator or a throwaway test project.
    // In production, keep this false.
    function isDev() {
      return false;
    }

    // Small helpers
    function reqData() { return request.resource.data; }
    function resData() { return resource.data; }
    function unchanged(field) { return reqData()[field] == resData()[field]; }
    function exists(path) { return exists(path); } // (alias for readability)

    // ===== /users =====
    match /users/{u} {

      // Read: 
      //  - Self
      //  - Admin
      //  - Any authenticated user may read a chauffeur's basic profile *if* chauffeurApproved == true
      allow get, list: if isSignedIn() && (
        u == uid() ||
        isAdmin() ||
        (resource.data.role == 'chauffeur' && resource.data.chauffeurApproved == true)
      );

      // Create:
      //  - Must create own doc
      //  - Allowed self-assignable roles: customer/garage/chauffeur/courier
      //  - Cannot self-create admin/support
      //  - In PROD (isDev == false): force approval flags to false initially
      allow create: if isSignedIn() &&
        u == uid() &&
        (reqData().role in ['customer','garage','chauffeur','courier']) &&
        !(reqData().role in ['admin','support']) &&
        (
          isDev() ||
          (
            (reqData().vendorApproved == false || !( 'vendorApproved' in reqData())) &&
            (reqData().chauffeurApproved == false || !( 'chauffeurApproved' in reqData())) &&
            (reqData().courierApproved == false || !( 'courierApproved' in reqData()))
          )
        );

      // Update:
      //  - Self may update *safe* fields only (e.g., displayName, photoUrl, phone)
      //  - Role and approval flags are immutable by self
      //  - Admin may update any fields
      allow update: if isSignedIn() && (
        isAdmin() ||
        (
          u == uid() &&
          // Immutable by self:
          unchanged('role') &&
          unchanged('vendorApproved') &&
          unchanged('chauffeurApproved') &&
          unchanged('courierApproved')
        )
      );

      // Delete: Admin only
      allow delete: if isAdmin();
    }

    // ===== /rentals =====
    match /rentals/{rentalId} {

      // Rentals are public to read
      allow get, list: if true;

      // Create/Update/Delete by owning vendor (garage) with approval
      allow create: if isSignedIn() &&
        isGarage(uid()) &&
        vendorApproved(uid()) &&
        reqData().vendorId == uid();

      allow update, delete: if isSignedIn() && (
        isAdmin() ||
        (
          isGarage(uid()) &&
          vendorApproved(uid()) &&
          resData().vendorId == uid() &&
          reqData().vendorId == uid()
        )
      );

      // ===== /rentals/{rentalId}/reservations =====
      match /reservations/{resId} {
        // Read: involved parties (customer, owning vendor), admin
        allow get, list: if isSignedIn() && (
          isAdmin() ||
          (resData().customerId == uid()) ||
          // Owning vendor can read â€” use parent vendorId
          (get(/databases/$(database)/documents/rentals/$(rentalId)).data.vendorId == uid())
        );

        // Create: by customer; must set own customerId; initial status 'pending'
        allow create: if isSignedIn() &&
          reqData().customerId == uid() &&
          (reqData().status == 'pending') &&
          ('startDate' in reqData() && 'endDate' in reqData()) &&
          ('agreedToTerms' in reqData() && reqData().agreedToTerms == true) &&
          ('agreedToContract' in reqData() && reqData().agreedToContract == true);

        // Updates: protect invariants and allow specific role actions
        allow update: if isSignedIn() && (
          // Customer cancels own reservation
          (resData().customerId == uid() &&
           reqData().status == 'cancelled' &&
           unchanged('customerId') && unchanged('startDate') && unchanged('endDate') && unchanged('vendorId'))
          ||
          // Vendor (owner) can confirm / assign chauffeur etc.; vendorId must remain unchanged
          (get(/databases/$(database)/documents/rentals/$(rentalId)).data.vendorId == uid() &&
           unchanged('customerId') && unchanged('startDate') && unchanged('endDate') && unchanged('vendorId'))
          ||
          // Chauffeur modifies only assignment status
          ((reqData().chauffeurAssignment.driverId == uid() || resData().chauffeurAssignment.driverId == uid()) &&
           unchanged('customerId') && unchanged('startDate') && unchanged('endDate') && unchanged('vendorId'))
          ||
          isAdmin()
        );

        // Delete: admin or owning vendor
        allow delete: if isAdmin() ||
          (isSignedIn() && get(/databases/$(database)/documents/rentals/$(rentalId)).data.vendorId == uid());
      }
    }

    // ===== Chauffeur Availability =====
    match /users/{u}/availability/{slotId} {
      allow get, list: if isSignedIn() && (u == uid() || isAdmin());
      allow create, update, delete: if isSignedIn() &&
        u == uid() && isChauffeur(uid()) && chauffeurApproved(uid());
    }

    // ===== Chauffeur Jobs (/users/{u}/chauffeur_jobs/{jobId}) =====
    match /users/{u}/chauffeur_jobs/{jobId} {
      allow get, list: if isSignedIn() && (u == uid() || isAdmin());

      // Accept/decline by the chauffeur only when status is currently 'offer'
      allow update: if isSignedIn() &&
        u == uid() &&
        isChauffeur(uid()) &&
        (
          (resData().status == 'offer' && reqData().status in ['accepted','declined'])
          ||
          isAdmin()
        );

      // Create/delete by admin or system (optional)
      allow create, delete: if isAdmin();
    }

    // ===== Delivery Jobs (Parts same-day) =====
    match /delivery_jobs/{jobId} {
      // Read: any signed-in user (adjust to stricter if needed)
      allow get, list: if isSignedIn();

      // Create: by approved vendor (the creator must own vendorId)
      allow create: if isSignedIn() &&
        isGarage(uid()) &&
        vendorApproved(uid()) &&
        reqData().vendorId == uid();

      // Update:
      //  - Claim: courier can change status 'open' -> 'assigned' and set assignedCourierId = self
      //  - Progress: assigned courier can move through allowed transitions
      //  - Vendor/admin may update their own job
      function isAssignedToSelf() {
        return resData().assignedCourierId == uid() || reqData().assignedCourierId == uid();
      }
      function statusTransitionAllowed(old, neu) {
        // Allowed chain: open -> assigned -> picked_up -> enroute -> delivered
        return (old == 'open' && neu == 'assigned') ||
               (old == 'assigned' && neu == 'picked_up') ||
               (old == 'picked_up' && neu == 'enroute') ||
               (old == 'enroute' && neu == 'delivered') ||
               (old == neu); // allow idempotent writes
      }

      allow update: if isSignedIn() && (
        // Claim by courier
        (
          isCourier(uid()) && courierApproved(uid()) &&
          resData().status == 'open' &&
          reqData().status == 'assigned' &&
          reqData().assignedCourierId == uid()
        )
        ||
        // Progress by assigned courier
        (
          isCourier(uid()) && courierApproved(uid()) &&
          isAssignedToSelf() &&
          statusTransitionAllowed(resData().status, reqData().status) &&
          // Protect immutable fields
          unchanged('vendorId') && unchanged('customerId') &&
          unchanged('pickupAddress') && unchanged('dropoffAddress') && unchanged('size') && unchanged('weight')
        )
        ||
        // Vendor updates their own job (e.g., cancel or correct meta)
        (
          isGarage(uid()) && vendorApproved(uid()) &&
          resData().vendorId == uid()
        )
        ||
        isAdmin()
      );

      // Delete: admin or owning vendor
      allow delete: if isAdmin() ||
        (isSignedIn() && isGarage(uid()) && resData().vendorId == uid());
    }

    // ===== Support Tickets =====
    match /support_tickets/{ticketId} {
      // Create by any signed-in user
      allow create: if isSignedIn() && reqData().openedBy == uid();

      // Read:
      //  - The opener
      //  - Support/admin
      allow get, list: if isSignedIn() && (
        resData().openedBy == uid() || isSupport() || isAdmin()
      );

      // Update:
      //  - Support/admin can set status to 'assigned' or 'closed'
      //  - Opener cannot modify others' tickets
      allow update: if isSignedIn() && (
        isSupport() || isAdmin()
      );

      // Delete: admin only
      allow delete: if isAdmin();
    }

    // ===== /services =====
    match /services/{serviceId} {
      // Read policy: public listing is OK; restrict if needed later
      allow get, list: if true;

      // Create by approved vendor; must own the service
      allow create: if isSignedIn() &&
        isGarage(uid()) && vendorApproved(uid()) &&
        reqData().garageId == uid();

      // Update/Delete by owning vendor or admin
      allow update, delete: if isSignedIn() && (
        isAdmin() || (
          isGarage(uid()) && vendorApproved(uid()) &&
          resData().garageId == uid() && (('garageId' in reqData()) ? reqData().garageId == uid() : true)
        )
      );
    }


    // ===== Default deny =====
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
